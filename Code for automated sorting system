import cv2
import RPi.GPIO as GPIO
import time
import numpy as np
from time import sleep

# Set the GPIO mode
GPIO.setmode(GPIO.BCM)
GPIO.setup(17, GPIO.OUT)

# Define the GPIO pin to which the servo signal pin is connected
servo_pin = 17
IN1 = 27
IN2 = 22
EN=23

# Set up the GPIO pin for output
GPIO.setup(servo_pin, GPIO.OUT)
GPIO.setup(IN1, GPIO.OUT)
GPIO.setup(IN2, GPIO.OUT)
GPIO.setup(EN, GPIO.OUT)

# Create a PWM object
pwm = GPIO.PWM(servo_pin, 50)  # 50 Hz (typical for servos)

# Start the PWM with a 0 degree position (duty cycle of 2.5%)
pwm.start(0)

def forward():
    GPIO.output(IN1, GPIO.HIGH)
    GPIO.output(IN2, GPIO.LOW)
    pwm.ChangeDutyCycle(50)

def stop_motor():
    GPIO.output(motor_pin1, GPIO.LOW)
    GPIO.output(motor_pin2, GPIO.LOW)
   
def detect_colors(image_path):
    # Load the image
    image = cv2.imread(image_path)
   
    # Convert the image to the HSV color space
    hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

    # Define color ranges
    lower_red = np.array([0, 100, 100])
    upper_red = np.array([10, 255, 255])

    lower_green = np.array([35, 100, 100])
    upper_green = np.array([85, 255, 255])

    lower_blue = np.array([110, 100, 100])
    upper_blue = np.array([130, 255, 255])

    # Threshold the image to get masks for each color
    mask_red = cv2.inRange(hsv_image, lower_red, upper_red)
    mask_green = cv2.inRange(hsv_image, lower_green, upper_green)
    mask_blue = cv2.inRange(hsv_image, lower_blue, upper_blue)

    # Check which color has the most pixels in the masks
    red_pixels = cv2.countNonZero(mask_red)
    green_pixels = cv2.countNonZero(mask_green)
    blue_pixels = cv2.countNonZero(mask_blue)

    # Determine the detected color
    if red_pixels > green_pixels and red_pixels > blue_pixels:
        detected_color = "Red"
    elif green_pixels > red_pixels and green_pixels > blue_pixels:
        detected_color = "Green"
    elif blue_pixels > red_pixels and blue_pixels > green_pixels:
        detected_color = "Blue"
    else:
        detected_color = "Other"

    return detected_color

def move_servo(angle):
    duty = angle / 18 + 2  # Map angle (0-180) to duty cycle (2-12)
    pwm.ChangeDutyCycle(duty)
    time.sleep(1)
   
flag = None


while(True):
    forward()  # Rotate motor forward


    # Initialize the camera
    cap = cv2.VideoCapture(0)  # 0 represents the default camera (you can change it to 1, 2, etc. if you have multiple cameras)

    # Check if the camera was opened successfully
    if not cap.isOpened():
        print("Error: Could not open the camera.")
        exit()

    # Capture a frame
    ret, frame = cap.read()

    # Release the camera
    cap.release()

    # Check if the frame was captured successfully
    if not ret:
        print("Error: Could not capture frame.")
        exit()

    # Save the frame as an image
    cv2.imwrite("captured_photo.jpg", frame)

    # Display a message
    print("Photo captured and saved as 'captured_photo.jpg'.")
   
    detected_color = detect_colors("captured_photo.jpg")
    print(detected_color)

   
    if(detected_color == "Red"):
        if(flag == "Red"):
            pwm.ChangeDutyCycle(0)
            flag = "Red"
        else:    
            move_servo(0)
            sleep(1)
            pwm.ChangeDutyCycle(0)
            flag = "Red"
       
    elif(detected_color == "Green"):
        if(flag == "Green"):
            pwm.ChangeDutyCycle(0)
            flag = "Green"
        else:
            move_servo(90)
            sleep(1)
            pwm.ChangeDutyCycle(0)
            flag = "Green"
       
    elif(detected_color == "Blue"):
        if(flag == "Blue"):
            pwm.ChangeDutyCycle(0)
            flag = "Blue"
        else:
            move_servo(180)
            sleep(1)
            pwm.ChangeDutyCycle(0)
            flag = "Blue"
    else:
        pwm.ChangeDutyCycle(0)
       

GPIO.cleanup()
